restful形式：

http://ip:port/action?key1=value1&key2=value2

URL
http://127.0.0.1:80/login?userName=value1&userPWD=value2





#接口访问类型
get--查询操作
post--添加
put---修改
delete--删除

@post
login()--登陆，指定访问形式

返回值：
json---比较轻便

xml--比较繁琐
String--返回提示一句话
stream--文件

trace--获取后端信息
head--头，获取非body信息
options

开源网站：
http://httpbin.org/

打开cmd查看当前的线程
netstat -ano | findstr :80


1、编写一个用户注册的场景
    1.1.服务端：注册成功的返回响应（json）
    1）定义一个接口
    2）定义接口的人口类型（post)
    3）接口实现（获取参数。保存注册信息（写文件），将结果返回）
    4）返回的格式为json
    1.2.客户端进行访问
    1）根据requests.接口类型（url)
    2）打印访问结果
    1.3..将注册信息保存在文件中
2、登录场景
   2.1服务端：
   1）定义登陆方法，并指定访问人口类型和路径
   2）获取参数（手机号，密码）
   3）生成随机数，作为一个token
   4）将token保存在文件中，token需要加入到注册信息的后面（手机号，密码，token）
   5）用户名和密码正确返回登陆成功，错误返回提示
   2.2.客户端进行访问
    1）根据requests.接口类型（url)
    2）打印访问结果
   2.1 使用用户名(手机号)和密码登录系统
   2.2 登录成功后返回登录token，将token存在文件中(用户名,密码，token)
common代码：
# encoding=utf-8
import json
import os
#注册方法
filePath = os.getcwd()+"\\data\\register.txt"

#判断用户是否存在
def userExist(userName):
    flag = 0 #0表示不存在
    if os.path.exists(filePath) == False:
        with open(filePath,"w") as f:
            f.write("")
    if os.path.exists(filePath):
        with open(filePath,"r") as f:
            lines = f.readlines()
            for line in lines:
                if(line.startswith(userName)):
                    flag = 1 #表示存在
                    break
    return flag
#注册方法
def regiger(userName,userPwd):
    #判断用户是否存在
    flag = userExist(userName)
    if flag == 0:#用户存在的情况
        with open(filePath,"a+") as f:
            f.write("\n"+userName+","+userPwd)
        # return json.loads('{"message":"user register success","status":0}') #或者使用下面的选项
        return {"message":"user register success","status":0}
    else: #用户不存在的情况
        return json.loads('{"message":"user has registered,user name is '+userName+'","status":1}')


练习：将注册的接口，转换成字典传参

http协议，https协议的区别：

1.将登录方法中返回一个自定义的消息，返回header，header中的server字段进行修改为abc





api(paramter)---提供对外访问

内部：
内部的一个函数--app中一个查询基本信息，内部调用多个函数
 A（token验证）->B（查询基本信息）-->C（操作图片）

外部：
api(paramter)---提供对外访问（上层的业务）
APP（客户端1_app）---服务端（并行开发）
APP（客户端2_微信公众号）---服务端（并行开发）
APP（客户端3_其他）---服务端（并行开发）

主题：通过一个项目运作的形式去开展接口测试工作
1、需求概要设计----定接口名称
2、需求详细设计---设计详细接口参数（数据库设计对应）
    2.1字段的设计，字段的名称，字段的类型，长度，是否为空，约束
    2.2输出一个接口设计文档（可能没有？）
    敏捷：沟通
    测试登陆的接口返回成功了，能不能满足要求？
    （格式，header，httpcode，响应体）
3、测试设计
    3.1功能场景----能否满足用户的场景
    3.2业务流程----熟悉接口的消息传递工程
        3.2.1可通过需求设计文档中的流程设计
        3.2.2接口实现的框架是什么？（基本实现原理）比如：MVC（设计）（视图，模型，控制器）
        例如： 一个参数10种输入方式，两个参数
            1）消息过来的流程是什么？
                人口--->解析-->认证-->校验（验证框架/代码if）-->业务逻辑-->数据存储
            2）处理消息结果是什么？
            校验结果-->（返回响应（格式，header，httpcode，响应体等返回是否正确），数据库数据（结构化数据，非结构化数据），数据库类型（关系型数据库，非关系型数据库），文件服务器）
    3.3 接口设计
        3.3.1 边界值 字符串类型，长度为100.不能为空（上点/离点）0，100 1 100 101
        3.3.2 等价类（有效等价类和无效等价类）
        3.3.3 特殊字符（sql注入 where 1== 1，&&& $$$）安全测试
        3.3.4 组合设计（pairwise--两两组合）
        以什么维度来做设计？因子设计，可以理解为以单个参数进行设计
        接口结果设计：
        响应体，数据存储，文件存储

    》场景设计
        正常场景---组合场景（功能设计）
        异常场景---A-B-C（c出现异常） -----a得到的结果是什么，响应体是什么
        3.3.5 写用例（效率）标题、级别、前置条件、测试步骤、预期结果，类型、备注
        快：excel
        简单 ： 内容步骤，通用
        质量：测试点/验证点

    3.4 接口工具
    手工测试工具
        restful 接口---restfulClient / soapUI / postman(浏览器插件） / jmeter / loadrunner
    自动测试工具(基于脚本）
        jmeter（有可以直接输入响应内容） / loadrunner / robotframework
    自动化框架
        自动化选型，用什么类型的自动化框架（appium,selenium)

4、测试执行
    4.1 准备测试环境（测试一定要亲自搭建环境，保证业务是通的）--- 不搭建环境，部署方式，配置，问题定位不准确
        Linux基本使用（服务器安装部署，脚本）手工（配置，数据库）
        持续集成自动构建（性能、可靠性测试，配置测试）
    4.2 测试的策略和方案（快、准、质量）-------效率
        快和准：
            用例分类管理与测试（基于场景的最长路径）
            自动化
            根据测试计划优先级，关联关系
    4.3 使用restfulClient工具进行接口测试

监听“0.0.0.0”表示监听所有的网段，所有的IP都可以访问
监听“127.0.0.1”指定IP进行访问

Content-Type: application/json
Content-Length: 54
Server: Werkzeug/0.12.2 Python/2.7.13
Date: Sun, 13 Aug 2017 08:17:45 GMT


















